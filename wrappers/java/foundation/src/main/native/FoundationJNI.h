/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class virgil_crypto_foundation_FoundationJNI */

#ifndef _Included_virgil_crypto_foundation_FoundationJNI
#define _Included_virgil_crypto_foundation_FoundationJNI
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    errorCtx_reset
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_errorCtx_1reset
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    errorCtx_error
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_errorCtx_1error
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    rawKey_alg
 * Signature: (J)Lvirgil/crypto/foundation/KeyAlg;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_rawKey_1alg
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    rawKey_data
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_rawKey_1data
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    oid_fromKeyAlg
 * Signature: (Lvirgil/crypto/foundation/KeyAlg;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_oid_1fromKeyAlg
  (JNIEnv *, jobject, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    oid_toKeyAlg
 * Signature: ([B)Lvirgil/crypto/foundation/KeyAlg;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_oid_1toKeyAlg
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    oid_equal
 * Signature: ([B[B)Ljava/lang/Boolean;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_oid_1equal
  (JNIEnv *, jobject, jbyteArray, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    base64_encodedLen
 * Signature: (Ljava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_base64_1encodedLen
  (JNIEnv *, jobject, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    base64_encode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_base64_1encode
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    base64_decodedLen
 * Signature: (Ljava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_base64_1decodedLen
  (JNIEnv *, jobject, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    base64_decode
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_base64_1decode
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    pem_wrappedLen
 * Signature: (Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_pem_1wrappedLen
  (JNIEnv *, jobject, jstring, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    pem_wrap
 * Signature: (Ljava/lang/String;[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_pem_1wrap
  (JNIEnv *, jobject, jstring, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    pem_unwrappedLen
 * Signature: (Ljava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_pem_1unwrappedLen
  (JNIEnv *, jobject, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    pem_unwrap
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_pem_1unwrap
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    pem_title
 * Signature: ([B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_pem_1title
  (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    defaults_setupDefaults
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_defaults_1setupDefaults
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    encrypt_encrypt
 * Signature: (J[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_encrypt_1encrypt
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    encrypt_encryptedLen
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_encrypt_1encryptedLen
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    decrypt_decrypt
 * Signature: (J[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_decrypt_1decrypt
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    decrypt_decryptedLen
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_decrypt_1decryptedLen
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    cipherInfo_getNonceLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_cipherInfo_1getNonceLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    cipherInfo_getKeyLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_cipherInfo_1getKeyLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    cipherInfo_getKeyBitlen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_cipherInfo_1getKeyBitlen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    cipherInfo_getBlockLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_cipherInfo_1getBlockLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    cipher_setNonce
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_cipher_1setNonce
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    cipher_setKey
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_cipher_1setKey
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    cipherAuthInfo_getAuthTagLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_cipherAuthInfo_1getAuthTagLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    authEncrypt_authEncrypt
 * Signature: (J[B[B)Lvirgil/crypto/foundation/AuthEncryptAuthEncryptResult;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_authEncrypt_1authEncrypt
  (JNIEnv *, jobject, jlong, jbyteArray, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    authEncrypt_authEncryptedLen
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_authEncrypt_1authEncryptedLen
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    authDecrypt_authDecrypt
 * Signature: (J[B[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_authDecrypt_1authDecrypt
  (JNIEnv *, jobject, jlong, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    authDecrypt_authDecryptedLen
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_authDecrypt_1authDecryptedLen
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    exKdf_derive
 * Signature: (J[B[B[BLjava/lang/Integer;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_exKdf_1derive
  (JNIEnv *, jobject, jlong, jbyteArray, jbyteArray, jbyteArray, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    hashInfo_getDigestLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_hashInfo_1getDigestLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    hashInfo_getBlockLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_hashInfo_1getBlockLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    hashInfo_alg
 * Signature: (J)Lvirgil/crypto/foundation/HashAlg;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_hashInfo_1alg
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    hash_hash
 * Signature: (J[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_hash_1hash
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    hashStream_start
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_hashStream_1start
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    hashStream_update
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_hashStream_1update
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    hashStream_finish
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_hashStream_1finish
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    macInfo_digestLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_macInfo_1digestLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    mac_mac
 * Signature: (J[B[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_mac_1mac
  (JNIEnv *, jobject, jlong, jbyteArray, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    macStream_start
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_macStream_1start
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    macStream_update
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_macStream_1update
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    macStream_finish
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_macStream_1finish
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    macStream_reset
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_macStream_1reset
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    kdf_derive
 * Signature: (J[BLjava/lang/Integer;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_kdf_1derive
  (JNIEnv *, jobject, jlong, jbyteArray, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    random_random
 * Signature: (JLjava/lang/Integer;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_random_1random
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    random_reseed
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_random_1reseed
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    entropySource_isStrong
 * Signature: (J)Ljava/lang/Boolean;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_entropySource_1isStrong
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    entropySource_gather
 * Signature: (JLjava/lang/Integer;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_entropySource_1gather
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    key_alg
 * Signature: (J)Lvirgil/crypto/foundation/KeyAlg;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_key_1alg
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    key_keyLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_key_1keyLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    key_keyBitlen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_key_1keyBitlen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    publicKey_getCanExportPublicKey
 * Signature: (J)Ljava/lang/Boolean;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_publicKey_1getCanExportPublicKey
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    publicKey_getCanImportPublicKey
 * Signature: (J)Ljava/lang/Boolean;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_publicKey_1getCanImportPublicKey
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    publicKey_exportPublicKey
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_publicKey_1exportPublicKey
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    publicKey_exportedPublicKeyLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_publicKey_1exportedPublicKeyLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    publicKey_importPublicKey
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_publicKey_1importPublicKey
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    privateKey_getCanExportPrivateKey
 * Signature: (J)Ljava/lang/Boolean;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_privateKey_1getCanExportPrivateKey
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    privateKey_getCanImportPrivateKey
 * Signature: (J)Ljava/lang/Boolean;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_privateKey_1getCanImportPrivateKey
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    privateKey_extractPublicKey
 * Signature: (J)Lvirgil/crypto/foundation/PublicKey;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_privateKey_1extractPublicKey
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    privateKey_exportPrivateKey
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_privateKey_1exportPrivateKey
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    privateKey_exportedPrivateKeyLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_privateKey_1exportedPrivateKeyLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    privateKey_importPrivateKey
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_privateKey_1importPrivateKey
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    sign_sign
 * Signature: (J[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_sign_1sign
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    sign_signatureLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_sign_1signatureLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    verify_verify
 * Signature: (J[B[B)Ljava/lang/Boolean;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_verify_1verify
  (JNIEnv *, jobject, jlong, jbyteArray, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    generateKey_generateKey
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_generateKey_1generateKey
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    computeSharedKey_computeSharedKey
 * Signature: (JLvirgil/crypto/foundation/PublicKey;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_computeSharedKey_1computeSharedKey
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    computeSharedKey_sharedKeyLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_computeSharedKey_1sharedKeyLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    keySerializer_serializedPublicKeyLen
 * Signature: (JLvirgil/crypto/foundation/PublicKey;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_keySerializer_1serializedPublicKeyLen
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    keySerializer_serializePublicKey
 * Signature: (JLvirgil/crypto/foundation/PublicKey;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_keySerializer_1serializePublicKey
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    keySerializer_serializedPrivateKeyLen
 * Signature: (JLvirgil/crypto/foundation/PrivateKey;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_keySerializer_1serializedPrivateKeyLen
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    keySerializer_serializePrivateKey
 * Signature: (JLvirgil/crypto/foundation/PrivateKey;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_keySerializer_1serializePrivateKey
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    keyDeserializer_deserializePublicKey
 * Signature: (J[BLvirgil/crypto/foundation/ErrorCtx;)Lvirgil/crypto/foundation/RawKey;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_keyDeserializer_1deserializePublicKey
  (JNIEnv *, jobject, jlong, jbyteArray, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    keyDeserializer_deserializePrivateKey
 * Signature: (J[BLvirgil/crypto/foundation/ErrorCtx;)Lvirgil/crypto/foundation/RawKey;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_keyDeserializer_1deserializePrivateKey
  (JNIEnv *, jobject, jlong, jbyteArray, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_reset
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1reset
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_error
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1error
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_getTag
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1getTag
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_getLen
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1getLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readTag
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readTag
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readInt
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readInt
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readInt8
 * Signature: (J)Ljava/lang/Byte;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readInt8
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readInt16
 * Signature: (J)Ljava/lang/Short;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readInt16
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readInt32
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readInt32
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readInt64
 * Signature: (J)Ljava/lang/Long;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readInt64
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readUint
 * Signature: (J)Ljava/lang/Long;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readUint
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readUint8
 * Signature: (J)Ljava/lang/Short;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readUint8
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readUint16
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readUint16
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readUint32
 * Signature: (J)Ljava/lang/Long;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readUint32
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readUint64
 * Signature: (J)Ljava/lang/Long;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readUint64
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readBool
 * Signature: (J)Ljava/lang/Boolean;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readBool
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readNull
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readNull
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readOctetStr
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readOctetStr
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readBitstringAsOctetStr
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readBitstringAsOctetStr
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readUtf8Str
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readUtf8Str
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readOid
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readOid
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readData
 * Signature: (JLjava/lang/Integer;)[B
 */
JNIEXPORT jbyteArray JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readData
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readSequence
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readSequence
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Reader_readSet
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Reader_1readSet
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_reset
 * Signature: (JLjava/lang/Byte;Ljava/lang/Integer;)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1reset
  (JNIEnv *, jobject, jlong, jobject, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_finish
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1finish
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_error
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1error
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_reserve
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Byte;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1reserve
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeTag
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeTag
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeLen
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeLen
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeInt
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeInt
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeInt8
 * Signature: (JLjava/lang/Byte;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeInt8
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeInt16
 * Signature: (JLjava/lang/Short;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeInt16
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeInt32
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeInt32
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeInt64
 * Signature: (JLjava/lang/Long;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeInt64
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeUint
 * Signature: (JLjava/lang/Long;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeUint
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeUint8
 * Signature: (JLjava/lang/Short;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeUint8
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeUint16
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeUint16
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeUint32
 * Signature: (JLjava/lang/Long;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeUint32
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeUint64
 * Signature: (JLjava/lang/Long;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeUint64
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeBool
 * Signature: (JLjava/lang/Boolean;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeBool
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeNull
 * Signature: (J)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeNull
  (JNIEnv *, jobject, jlong);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeOctetStr
 * Signature: (J[B)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeOctetStr
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeOctetStrAsBitstring
 * Signature: (J[B)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeOctetStrAsBitstring
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeData
 * Signature: (J[B)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeData
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeUtf8Str
 * Signature: (J[B)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeUtf8Str
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeOid
 * Signature: (J[B)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeOid
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeSequence
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeSequence
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     virgil_crypto_foundation_FoundationJNI
 * Method:    asn1Writer_writeSet
 * Signature: (JLjava/lang/Integer;)Ljava/lang/Integer;
 */
JNIEXPORT jobject JNICALL Java_virgil_crypto_foundation_FoundationJNI_asn1Writer_1writeSet
  (JNIEnv *, jobject, jlong, jobject);

#ifdef __cplusplus
}
#endif
#endif
