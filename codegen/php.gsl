.template 0
#   Copyright (C) 2015-2019 Virgil Security, Inc.
#
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#       (1) Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#       (2) Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#       (3) Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
#   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
#   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#   IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
#   Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>

# ---------------------------------------------------------------------------
#   Contains API for PHP wrapper generation.
# ---------------------------------------------------------------------------
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
# ---------------------------------------------------------------------------

gsl from "common.gsl"
gsl from "interface.gsl"
gsl from "component.gsl"
gsl from "c_component.gsl"
gsl from "php_codegen.gsl"

# ---------------------------------------------------------------------------
#   Create module with PHP protocol from the abstract 'interface' notion.
# ---------------------------------------------------------------------------
function php_create_interface_module (interface, destination, wrapper, meta)
    check_arguments (my, "interface, destination, wrapper, meta", my)

    echo_info ("Create <php_module/> from interface: '$(my.interface.name:)'", my)

    new php_module to my.destination
        .name = php_derive_module_name (my.interface)
        .source_file_name = 0.name + ".php"
        .source_file_path = cat_path (my.wrapper.source_dir, 0.source_file_name)

        new php_license to php_module
            . = php_format_license (my.wrapper->license) ?
        endnew

        for my.wrapper.php_import
            copy php_import to php_module
        endfor

        new php_protocol to php_module
            . = php_format_description (my.interface) ?
            .name = php_derive_protocol_name (my.interface, my.wrapper)
            .objc_name = php_derive_protocol_objc_name (php_protocol, my.wrapper)

            php_map_attr_visibility (php_protocol, my.interface)

            for my.interface.inherit
                php_create_inherit (inherit, php_protocol, my.wrapper, my.meta)
            else
                php_create_inherit_c_context (php_protocol)
            endfor

            for my.interface.constant
                php_create_property_from_constant (constant, php_protocol, my.wrapper, my.meta)
            endfor

            for my.interface.method
                php_create_interface_method (my.interface, method, php_protocol, my.wrapper, my.meta)
            endfor

            for php_protocol.php_method where count (0.php_return) > 1
                php_create_result_class (php_protocol, php_method, php_module, my.wrapper, my.meta)
            endfor
        endnew

        php_create_interface_proxy_class (my.interface, php_module, my.wrapper, my.meta)
    endnew

    echo_debug ("Done", my)
endfunction

# ---------------------------------------------------------------------------
#   Add all components related to the interface.
# ---------------------------------------------------------------------------
function php_create_interface_proxy_class (interface, destination, wrapper, meta)
    check_arguments (my, "interface, destination, wrapper, meta", my)

   new php_class to php_module
        . = "* Implement interface methods "
        .name = php_derive_proxy_protocol_name (my.interface)
        .objc_name = php_derive_class_objc_name (php_class, my.wrapper)
        .visibility = "public"

        php_create_inherit_nsobject (php_class)
        php_create_inherit (my.interface, php_class, my.wrapper, my.meta)
        php_create_class_property_context (php_class)
        php_create_class_constructor_context (php_class, my.wrapper, my.meta)
        php_create_interface_proxy_class_destructor (php_class, my.wrapper, my.meta)

        php_create_interface_proxy_class_inheritance (my.interface, php_class, my.wrapper, my.meta)

        for php_class.php_method where count (0.php_return) > 1
            php_create_result_class (php_class, php_method, php_module, my.wrapper, my.meta)
        endfor
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add implementation of the inherited constants and methods to the
#   interface proxy class.
# ---------------------------------------------------------------------------
function php_create_interface_proxy_class_inheritance (interface, php_class, wrapper, meta)
    check_arguments (my, "interface, php_class, wrapper, meta", my)

    if count (my.php_class.implemented, implemented.interface = my.interface.name)
        return
    endif

    for my.interface.inherit
        my.parent_interface = interface_global_find (inherit.interface, inherit.project)
        php_create_interface_proxy_class_inheritance (my.parent_interface, my.php_class, my.wrapper, my.meta)
    endfor

    for my.interface.constant
        php_create_proxy_property_from_constant (constant, my.interface, my.php_class, my.wrapper, my.meta)
    endfor

    for my.interface.method
        php_create_class_method (my.interface, method, my.php_class, my.wrapper, my.meta)
    endfor

    new implemented to my.php_class
        .interface = my.interface.name
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create PHP computed property that makes proxy to retrieve constant.
# ---------------------------------------------------------------------------
function php_create_proxy_property_from_constant (constant, interface, destination, wrapper, meta)
    check_arguments (my, "constant, interface, destination, wrapper, meta", my)

    my.php_constant = php_create_property_from_constant (my.constant, my.destination, my.wrapper, my.meta)

    my.api_getter = interface_derive_c_api_method (my.interface)
    my.constant_getter = interface_derive_c_constant_method (my.interface, my.constant)

    new computed to my.php_constant
        . = "\
            return $(my.constant_getter:)($(my.api_getter:)(self.c_ctx))
        "
    endnew
endfunction


# ---------------------------------------------------------------------------
#   Create <php_destructor/> that takes delete C implementation context.
# ---------------------------------------------------------------------------
function php_create_interface_proxy_class_destructor (destination, wrapper, meta)
    check_arguments (my, "destination, wrapper, meta", my)

    new php_destructor to my.destination
        . = "* 1111Release underlying C context."

        new php_code to php_destructor
            . = ".(c_class_impl_method_delete)(self.c_ctx)"
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create <php_constructor/> that takes underlying C context.
# ---------------------------------------------------------------------------
function php_create_class_constructor_context (destination, wrapper, meta)
    check_arguments (my, "destination, wrapper, meta", my)

    new php_constructor to my.destination
        . = "* Take C context that implements this interface"
        .visibility = "public"

        new php_argument to php_constructor
            .name = "c_ctx"
            .type = "OpaquePointer"
        endnew

        new php_code
            . = "
                self.c_ctx = c_ctx
                super.init()
            "
        endnew

        return php_constructor
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Return formatted name of the PHP protocol.
# ---------------------------------------------------------------------------
function php_derive_proxy_protocol_name (interface, wrapper)
    check_arguments (my, "interface", my)

    assert_attribute_one_of (my.interface, "name, interface", my)

    return "$(my.interface.name ? my.interface.interface:Pascal)Proxy"
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_method/> of from the interface entity <method/>.
# ---------------------------------------------------------------------------
function php_create_interface_method (interface, method, destination, wrapper, meta)
    check_arguments (my, "interface, method, destination, wrapper, meta", my)

    return php_create_method_declaration (my.interface, my.method, my.destination, my.wrapper, my.meta)
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_property/> from the entity <instance/>.
# ---------------------------------------------------------------------------
function php_create_property_from_constant (constant, destination, wrapper, meta)
    check_arguments (my, "constant, destination, wrapper, meta", my)

    new php_property to my.destination
        . = php_format_description (my.constant) ?
        .name = php_derive_constant_name (my.constant, my.wrapper)
        .type = php_derive_constant_type (my.constant, my.wrapper)
        .value = my.constant.value ?
        .visibility = "public"
        .access = "readonly"

        return php_property
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Return mapped constant type.
# ---------------------------------------------------------------------------
function php_derive_constant_type (instance, wrapper)
    check_arguments (my, "instance, wrapper", my)

    return "Int"
endfunction

# ---------------------------------------------------------------------------
#   Return formatted constant name.
# ---------------------------------------------------------------------------
function php_derive_constant_name (constant, wrapper)
    check_arguments (my, "constant", my)

    assert_attribute (my.constant, "name", my)

    return php_derive_constant_name_str (my.constant.name)
endfunction

# ---------------------------------------------------------------------------
#   Return formatted constant name from raw name.
# ---------------------------------------------------------------------------
function php_derive_constant_name_str (name)
    check_arguments (my, "name", my)

    return "$(my.name:Camel)"
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_inherit/> from protocol that defines C context.
# ---------------------------------------------------------------------------
function php_create_inherit_c_context (destination)
    check_arguments (my, "destination", my)

    new php_inherit to my.destination
        .type = "CContext"

        return php_inherit
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_inherit/> from the entity <inherit/>.
# ---------------------------------------------------------------------------
function php_create_inherit (inherit, destination, wrapper, meta)
    check_arguments (my, "inherit, destination, wrapper, meta", my)

    new php_inherit to my.destination
        .type = php_derive_protocol_name (my.inherit, my.wrapper)

        return php_inherit
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Return formatted name of the PHP protocol.
# ---------------------------------------------------------------------------
function php_derive_protocol_name (interface, wrapper)
    check_arguments (my, "interface, wrapper", my)

    assert_attribute_one_of (my.interface, "name, interface", my)

    return "$(my.interface.name ? my.interface.interface:Pascal)"
endfunction

# ---------------------------------------------------------------------------
#   Create module with PHP class from the abstract 'class' notion.
# ---------------------------------------------------------------------------
function php_create_class_module (class, destination, wrapper, meta)
    check_arguments (my, "class, destination, wrapper, meta", my)

    echo_info ("Create <php_module/> from class: '$(my.class.name:)'", my)

    assert_attribute (my.class, "name", my)

    if string_in (my.class.name, "data, buffer")
        #   Do not generate classes that can be mapped to the built-in types.
        return
    endif

    new php_module to my.destination
        .name = php_derive_module_name (my.class)
        .source_file_name = 0.name + ".php"
        .source_file_path = cat_path (my.wrapper.source_dir, 0.source_file_name)

        new php_license to php_module
            . = php_format_license (my.wrapper->license) ?
        endnew

        for my.wrapper.php_import
            copy php_import to php_module
        endfor

        new php_class to php_module
            . = php_format_description (my.class) ?
            .name = php_derive_class_name (my.class, my.wrapper)
            .objc_name = php_derive_class_objc_name (php_class, my.wrapper)

            php_map_attr_visibility (php_class, my.class)

            php_create_inherit_nsobject (php_class)

            if my.class.context <> "none"
                php_create_class_property_context (php_class, my.class)

                php_create_class_default_constructor (php_class, my.class, my.wrapper, my.meta)
                php_create_class_destructor (php_class, my.class, my.wrapper, my.meta)

                if my.class.lifecycle <> "none"
                    for my.class.constructor
                        php_create_class_constructor (my.class, constructor, php_class, my.wrapper, my.meta)
                    endfor
                endif
            endif

            for my.class.dependency
                php_create_method_from_dependency (dependency, my.class, php_class, my.wrapper, my.meta)
            endfor

            for my.class.method where method.declaration = "public" & method.visibility = "public"
                php_create_class_method (my.class, method, php_class, my.wrapper, my.meta)
            endfor

            for php_class.php_method where count (0.php_return) > 1
                php_create_result_class (php_class, php_method, php_module, my.wrapper, my.meta)
            endfor
        endnew
    endnew

    echo_debug ("Done", my)
endfunction

# ---------------------------------------------------------------------------
#   Add new <php_class/> that encapsulate multiple objects returned by
#   method.
# ---------------------------------------------------------------------------
function php_create_result_class (parent, php_method, destination, wrapper, meta)
    check_arguments (my, "parent, php_method, destination, wrapper, meta", my)

    assert_attributes (my.parent, "name, visibility", my)
    assert_attribute (my.php_method, "name", my)

    if item_in (my.parent, "php_class") & defined (my.php_method.interface)
        for my.php_method.php_return
            delete php_return
        endfor

        new php_return to my.php_method
            .type = php_derive_result_class_name (my.parent, my.php_method)
        endnew

        return
    endif

    new php_class to my.destination
        . = "* Encapsulate result of method $(my.parent.name:).$(my.php_method.name:)()"
        .name = php_derive_result_class_name (my.parent, my.php_method)
        .objc_name = php_derive_class_objc_name (php_class, my.wrapper)
        .visibility = my.parent.visibility

        php_create_inherit_nsobject (php_class)

        for my.php_method.php_return
            new php_property to php_class
                .name = php_return.name
                .type = php_return.type
                .access = "readonly"
                .visibility = "public"
            endnew

            delete php_return
        endfor

        new php_return to my.php_method
            .type = php_class.name
        endnew

        new php_constructor to php_class
            . = "* Initialize all properties."
            .visibility = "public"

            for php_class.php_property
                copy php_property as php_argument to php_constructor
            endfor

            new php_code to php_constructor
                my.method_body ?= ""

                for php_class.php_property
                    my.method_body += format_left ("\
                        $this->$(php_property.name:) = $$(php_property.name:);
                    ")
                endfor

                #my.method_body += format_left ("super.init()")

                . = my.method_body
            endnew
        endnew

        return php_class
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_method/> of from the class entity <method/>.
# ---------------------------------------------------------------------------
function php_create_class_method (class, method, destination, wrapper, meta)
    check_arguments (my, "class, method, destination, wrapper, meta", my)

    #   Create declaration
    my.php_method = php_create_method_declaration (my.class, my.method, my.destination, my.wrapper, my.meta)

    #   Wrap proxy call
    my.proxy_args = php_format_c_proxy_args (my.class, my.method)
    my.proxy_call = "$(class_derive_c_method (my.class, my.method))($(my.proxy_args:));"
    my.proxy_return_type = php_derive_proxy_return_type (my.method)
    my.proxy_invocation = php_wrap_c_proxy_call (my.php_method, my.proxy_call, my.proxy_return_type)

    #   Handle errors
    if is_true (my.php_method.throws)
        my.enum_error = php_derive_enum_error_name (my.wrapper)
        #s!my.handle_errors = format_left("try $(my.enum_error:).handleError(fromC: proxyResult)")
        my.handle_errors = format_left("try $(my.enum_error:)::handleError($proxyResult);")
    endif

    #   Return result
    if count (my.php_method.php_return) = 1
        my.return_result = format_left ("return $(php_wrap_c_returned_value (my.php_method->php_return));")

    elsif count (my.php_method.php_return) > 1
        my.result_class = php_derive_result_class_name (my.destination, my.php_method)
        my.result_class_init_args = php_format_result_class_init_args (my.php_method)

        my.return_result = format_left ("return new $(my.result_class:)($(my.result_class_init_args:));")
    endif

    new php_code to my.php_method
        my.method_body = ""
        my.method_body += my.proxy_invocation ? ""
        my.method_body += terminator + my.handle_errors ? ""
        my.method_body += terminator + my.return_result ? ""

        . = my.method_body
    endnew

    return my.php_method
endfunction

# ---------------------------------------------------------------------------
#   Return formatted arguments list that is used to initialize returned
#   "result class".
# ---------------------------------------------------------------------------
function php_format_result_class_init_args (php_method)
    check_arguments (my, "php_method", my)

    my.init_args = ""

    for my.php_method.php_return
        #s!my.init_args += "$(php_return.name:): $(php_wrap_c_returned_value (php_return))"
        my.init_args += "$$(php_return.name:)"
        if ! last ()
            my.init_args += ", "
        endif
    endfor

    return my.init_args
endfunction

# ---------------------------------------------------------------------------
#   Return name of the class that handles multiple method's return values.
# ---------------------------------------------------------------------------
function php_derive_result_class_name (php_parent, php_method)
    check_arguments (my, "php_parent, php_method", my)

    return "$(my.php_method.interface ? my.php_parent.name:Pascal)$(my.php_method.name:Pascal)Result"
endfunction

# ---------------------------------------------------------------------------
#   Return C type wrapped to the PHP type.
# ---------------------------------------------------------------------------
function php_wrap_c_returned_value (php_return)
    check_arguments (my, "php_return", my)

    my.name = my.php_return.name ? "$proxyResult"
    my.type = my.php_return.type

    scope my.php_return

    if is_true (0.is_data)
        return "Data.init(bytes: $(my.name:).bytes, count: $(my.name:).len)"

    elsif is_true (0.is_primitive_type) & is_true_any (0.is_array, 0.is_reference)
        return "$(my.name:)!"

    elsif is_true (0.is_interface)
        return "$(my.type:)Proxy.init(c_ctx: $(my.name:)!)"

    elsif is_true (0.is_class) & is_false (0.is_buffer)
        if string_in (php_return.access, "readonly, readwrite")
            return "$(my.type:).init(use: $(my.name:)!)"
        else
            return "$(my.type:).init(take: $(my.name:)!)"
        endif

    elsif is_true (0.is_enum)
        return "$(my.type:).init(fromC: $(my.name:)!)"
    endif

    endscope
    return my.name
endfunction

# ---------------------------------------------------------------------------
#   Return proxy type of the method return value.
# ---------------------------------------------------------------------------
function php_derive_proxy_return_type (method)
    check_arguments (my, "method", my)

    if ! count (my.method.return)
        return "Void"
    endif

    my.return = my.method->return

    if defined (my.return.type)
        return php_derive_instance_type (my.return)

    elsif defined (my.return.enum)
        return make_ref_c (make_id ("class", my.return.enum, "enum", my.return.enum))

    elsif defined (my.return.class) | defined (my.return.impl)
        return "auto"
    endif

    return "Any"
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_method/> with <method/> declaration.
# ---------------------------------------------------------------------------
function php_create_method_declaration (class, method, destination, wrapper, meta)
    check_arguments (my, "class, method, destination, wrapper, meta", my)

    new php_method to my.destination
        . = php_format_description (my.method) ?
        .name = php_derive_method_name (method, my.wrapper)
        .throws = count (my.method.return, string_equal (return.enum, "error")) ?? "1" ? "0"
        .interface = my.method.interface ?

        if ! defined (my.method.interface)
            .modifier = is_true (my.method.is_static) ?? "static" ?
        endif

        php_map_attr_visibility (php_method, my.method)

        for my.method.argument
            if argument.access <> "writeonly"
                php_create_argument (argument, php_method, my.wrapper, my.meta)
            endif

            if string_in (argument.class, "buffer") & string_in (argument.access, "readwrite, writeonly")
                php_create_return_from_argument (my.class, my.method, argument, php_method, my.wrapper, my.meta)
            endif
        endfor

        for my.method.return where ! string_equal (return.enum, "error")
            php_create_return (return, php_method, my.wrapper, my.meta)
        endfor

        return php_method
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_return/> from the entity <return/>if it is not
#   an error, otherwise nothing is created.
# ---------------------------------------------------------------------------
function php_create_return (return, destination, wrapper, meta)
    check_arguments (my, "return, destination, wrapper, meta", my)

    new php_return to my.destination
        php_map_instance (php_return, my.return)
        return php_return
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_return/> from the entity <argument/>.
# ---------------------------------------------------------------------------
function php_create_return_from_argument (class, method, argument, destination, wrapper, meta)
    check_arguments (my, "class, method, argument, destination, wrapper, meta", my)

    assert_attributes (my.argument, "name", my)

    new php_return to my.destination
        .name = php_derive_instance_name (my.argument)
        php_map_instance (php_return, my.argument)
        php_return.was_argument = "1"

        if string_equal (my.argument.class, "buffer")
            php_return.length_getter = php_class_derive_buffer_length_getter (my.class, my.method, argument)
        endif

        return php_return
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Return invocation of the getter function that returns buffer length.
# ---------------------------------------------------------------------------
function php_class_derive_buffer_length_getter (class, method, argument)
    assert_attributes (my, "class, method, argument")

    assert_item (my.argument, "length", my)

    my.length = my.argument->length
    assert_attribute_one_of (my.length, "constant, argument, method", my)

    for my.length.proxy
        if ! defined (proxy.[to])
            echo_debug_item (my.argument, my)
            assert_attributes (proxy, "to", my)
        endif

        my.proxy_args ?= ""

        if ! first ()
            my.proxy_args += ", "
        endif

        if defined (proxy.argument)

            my.proxy_args += php_derive_argument_name_str (proxy.[to])
            my.proxy_args += ": " + php_derive_argument_name_str (proxy.argument)

            if string_in (proxy.cast, "data_length")
                my.proxy_args += ".count"
            endif
        else
            echo_debug_item (my.argument, my)
            echo_fatal ("Buffer length argument can be proxied. Undefined type.", my)
        endif
    endfor

    my.specified_proxy_object = get_one_of_attribute (my.length, "class, interface, impl") ?
    if defined (my.specified_proxy_object)
        if my.specified_proxy_object = "self"
            my.specified_proxy_object = my.class.name
        endif
        my.proxy_object = php_derive_class_name_str (my.specified_proxy_object)
    else
        my.proxy_object = "self"
    endif

    if defined (my.length.method)
        my.proxy_method = php_derive_method_name_str (my.length.method)
        return "self::$(my.proxy_method:)($(my.proxy_args?:))"

    elsif defined (my.length.constant)
        my.proxy_constant = php_derive_constant_name_str (my.length.constant)
        return "$(my.proxy_object:).$(my.proxy_constant:)"

    elsif defined (my.length.argument)
        my.proxy_argument = php_derive_argument_name_str (my.length.argument)
        return my.proxy_argument
    endif
endfunction

# ---------------------------------------------------------------------------
#   Add <php_method/> with setter only that proxy dependency to the
#   C context.
# ---------------------------------------------------------------------------
function php_create_method_from_dependency (dependency, impl, destination, wrapper, meta)
    check_arguments (my, "dependency, impl, destination, wrapper, meta", my)

    new php_method to my.destination
        . = php_format_description (my.dependency) ?
        .name = php_derive_method_name_str (cat ("set", my.dependency.name))
        .visibility = "public"
        .throws = my.dependency.has_observers

        my.arg_name = php_derive_argument_name (my.dependency)

        new php_argument to php_method
            .name = my.arg_name
            .type = php_derive_dependency_type (my.dependency)
        endnew

        new php_code to php_method
            if my.dependency.has_observers
                my.result_var = "let proxyResult = "
                my.enum_error = php_derive_enum_error_name (my.wrapper)
                my.impl_handle_error = "try $(my.enum_error:).handleError(fromC: proxyResult)"
            endif

            . = format_left("\
                $(class_derive_c_method_release_dependency (my.impl, my.dependency))(self.c_ctx)
                $(my.result_var?:)$(class_derive_c_method_use_dependency (my.impl, my.dependency))(self.c_ctx,\
                        $(my.arg_name:).c_ctx)
                $(my.impl_handle_error?:)
            ")
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Return formatted name of the PHP enum.
# ---------------------------------------------------------------------------
function php_derive_enum_error_name (wrapper)
    check_arguments (my, "wrapper", my)

    return "$(my.wrapper.project:Pascal)Error"
endfunction

# ---------------------------------------------------------------------------
#   Return .(UID) of dependency type.
# ---------------------------------------------------------------------------
function php_derive_dependency_type (dependency)
    check_arguments (my, "dependency", my)

    my.project_uid = component_derive_project_uid (my.dependency)

    if defined (my.dependency.interface)
        my.type_uid = make_id ("protocol", "$(my.dependency.interface:Pascal)")

    elsif defined (my.dependency.api)
        my.type_uid = make_id ("protocol", "$(my.dependency.api:Pascal)")

    elsif defined (my.dependency.class)
        my.type_uid = make_id ("class", "$(my.dependency.class:Pascal)")

    elsif defined (my.dependency.impl)
        my.type_uid = make_id ("class", "$(my.dependency.impl:Pascal)")

    else
        echo_debug_item (my.dependency, my)
        echo_fatal ("Unhanded dependency type.", my)
    endif

    return make_ref_php (make_id(my.project_uid, my.type_uid))
endfunction

# ---------------------------------------------------------------------------
#   Return formatted argument name.
# ---------------------------------------------------------------------------
function php_derive_argument_name (argument, wrapper)
    check_arguments (my, "argument", my)

    return php_derive_argument_name_str (my.argument.name)
endfunction

# ---------------------------------------------------------------------------
#   Return formatted argument name from raw name.
# ---------------------------------------------------------------------------
function php_derive_argument_name_str (name, wrapper)
    check_arguments (my, "name", my)

    return "$(my.name:Camel)"
endfunction

# ---------------------------------------------------------------------------
#   Return formatted method name.
# ---------------------------------------------------------------------------
function php_derive_method_name (method, wrapper)
    check_arguments (my, "method", my)

    return php_derive_method_name_str (my.method.name)
endfunction

# ---------------------------------------------------------------------------
#   Return formatted method name from raw name.
# ---------------------------------------------------------------------------
function php_derive_method_name_str (name)
    check_arguments (my, "name", my)

    return "$(my.name:Camel)"
endfunction

# ---------------------------------------------------------------------------
#   Create <php_constructor/> from abstract entity <constructor/>.
# ---------------------------------------------------------------------------
function php_create_class_constructor (class, constructor, destination, wrapper, meta)
    check_arguments (my, "class, constructor, destination, wrapper, meta", my)

    new php_constructor to my.destination
        . = php_format_description (my.constructor) ?
        .visibility = "public"

        for my.constructor.argument
            php_create_argument (argument, php_constructor, my.wrapper, my.meta)
        endfor

        #   Wrap proxy call
        my.proxy_args = php_format_c_proxy_args (my.class, my.constructor)
        my.proxy_call = "$(class_derive_c_constructor (my.class, my.constructor))($(my.proxy_args:))"
        my.proxy_return_type = php_derive_typed_pointer (my.class)
        my.proxy_invocation = php_wrap_c_proxy_call (php_constructor, my.proxy_call, my.proxy_return_type)

        my.context_assignment = format_left ("self.c_ctx = proxyResult")

        new php_code to php_constructor
            my.method_body = ""
            my.method_body += my.proxy_invocation ? ""
            my.method_body += terminator + my.context_assignment ? ""

            . = my.method_body
        endnew

        return php_constructor
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Return formatted string with code that makes proxy call:
#       - type mapping
#       - proxy call
#       - finalizing
# ---------------------------------------------------------------------------
function php_wrap_c_proxy_call (php_method, proxy_call, proxy_return_type)
    check_arguments (my, "php_method, proxy_call, proxy_return_type", my)

    #   Wrap output buffers.
    for my.php_method.php_return where 0.type = "Data" & is_true_both (0.is_buffer, 0.was_argument)
        if ! defined (php_return.length_getter)
            echo_debug_item (my.php_method)
        endif
        assert_attribute (php_return, "length_getter", my)

        my.buffer_name = php_return.name ? "result"

        my.buffers_instantiation ?= ""
        #s!wmy.buffers_instantiation += format_left ("\
        #s!    let $(my.buffer_name:)Count = $(php_return.length_getter:)
        #s!    var $(my.buffer_name:) = Data(count: $(my.buffer_name:)Count)
        #s!    var $(my.buffer_name:)Buf = .(c_project_common_class_buffer_method_new)()
        #s!    defer {
        #s!        .(c_project_common_class_buffer_method_delete)($(my.buffer_name:)Buf)
        #s!    }
        #s!") + terminator

        my.buffers_instantiation += format_left ("\
            $$(my.buffer_name:)Count = $(php_return.length_getter:);
            $$(my.buffer_name:) = count($$(my.buffer_name:)Count);
            $$(my.buffer_name:)Buf = .(c_project_common_class_buffer_method_new)();
            defer {
                .(c_project_common_class_buffer_method_delete)($(my.buffer_name:)Buf)
            }
        ") + terminator

        my.buffers_init ?= ""
        my.buffers_init += format_left("\
                .(c_project_common_class_buffer_method_init)($(my.buffer_name:)Buf)
                .(c_project_common_class_buffer_method_use)($(my.buffer_name:)Buf, \
                        $(my.buffer_name:)Pointer, $(my.buffer_name:)Count)
        ") + terminator

        my.buffers_shrink ?= ""
        my.buffers_shrink += format_left ("\
            $(my.buffer_name:).count = .(c_project_common_class_buffer_method_len)($(my.buffer_name:)Buf)
        ")
    endfor

    my.method_new_with_data = ".(c_project_common_class_buffer_method_new_with_data)"
    my.method_data = ".(c_project_common_class_data_method_data)"

    for my.php_method.php_argument where 0.type = "Data" & is_true (0.is_buffer)
        my.buffer_name = php_argument.name

        my.buffers_init ?= ""
        my.buffers_init += format_left("\
            var $(my.buffer_name:)Buf = $(my.method_new_with_data:)($(my.method_data:)($(my.buffer_name:)Pointer, $(my.buffer_name:).count))
        ")

        if php_argument.access <> "disown"
            my.buffers_init += format_left("\
                defer {
                    .(c_project_common_class_buffer_method_delete)($(my.buffer_name:)Buf)
                }
            ") + terminator
        endif
    endfor

    #   Create opened scopes for data and buffers..
    my.scope_count = 0

    if my.proxy_return_type <> "Void"
        #s!my.result_statement = "let proxyResult = "
        my.result_statement = "$proxyResult = "
    endif
    my.proxy_return_statement = (my.proxy_return_type = "auto") ?? "" ? "-> $(my.proxy_return_type:) "

    for my.php_method.php_argument where 0.type = "Data"
        my.opened_scope ?= ""
        my.opened_scope += format_left("\
            $(my.result_statement?:)$(php_argument.name:).withUnsafeBytes({ \
                ($(php_argument.name:)Pointer: UnsafePointer<byte>) $(my.proxy_return_statement:)in

        ", my.scope_count)
        my.result_statement = # undefined
        my.scope_count += 1
    endfor

    for my.php_method.php_return where 0.type = "Data" & is_true_both (0.is_buffer, 0.was_argument)
        my.opened_scope ?= ""
        my.opened_scope += format_left("\
            $(my.result_statement?:)$(php_return.name:).withUnsafeMutableBytes({ \
                ($(php_return.name:)Pointer: UnsafeMutablePointer<byte>) $(my.proxy_return_statement:)in

        ", my.scope_count)

        my.result_statement = # undefined
        my.scope_count += 1
    endfor

    if defined (my.buffers_init)
        my.buffers_init = format_left (my.buffers_init, my.scope_count)
    endif

    if my.scope_count > 0
        my.proxy_invocation = (my.proxy_return_type <> "Void") ?? "return " ? ""
    else
        #s!my.proxy_invocation = (my.proxy_return_type <> "Void") ?? "let proxyResult = " ? ""
        my.proxy_invocation = (my.proxy_return_type <> "Void") ?? "$proxyResult = " ? ""
    endif
    my.proxy_invocation += my.proxy_call
    my.proxy_invocation = format_left (my.proxy_invocation, my.scope_count)

    #   Create closed scopes for data and buffers.
    while my.scope_count > 0
        my.closed_scope ?= ""
        my.scope_count -= 1
        my.closed_scope += format_left("})", my.scope_count)
    endwhile

    return (my.buffers_instantiation ? "") + (my.opened_scope ? "") + (my.buffers_init ? "") + \
            my.proxy_invocation + (my.closed_scope ? "") + (my.buffers_shrink ? "")
endfunction

# ---------------------------------------------------------------------------
#   Return UnsafeMutablePointer<class>.
# ---------------------------------------------------------------------------
function php_derive_typed_pointer (class)
    check_arguments (my, "class", my)
    return "UnsafeMutablePointer<$(class_derive_c_type(my.class))>"
endfunction

# ---------------------------------------------------------------------------
#   Return formatted arguments list that is to by passed to the C method.
# ---------------------------------------------------------------------------
function php_format_c_proxy_args (class, method)
    check_arguments (my, "class, method", my)

    if is_false (my.method.is_static)
        my.proxy_args = "self.c_ctx"

    elsif defined (my.method.implementation)
        my.proxy_args = ""

    elsif defined (my.method.interface)
        my.proxy_args = "$(interface_derive_c_api_method_from_name(my.method.interface))(self.c_ctx)"
    endif

    for my.method.argument
        my.proxy_args ?= ""
        if my.proxy_args <> ""
            my.proxy_args += ", "
        endif

        my.arg_name = php_derive_instance_name (argument)

        my.proxy_arg = # undefined

        if string_equal (argument.class, "data")
            my.proxy_arg = ".(c_project_common_class_data_method_data)($(my.arg_name:)Pointer, $(my.arg_name:).count)"

        elsif string_equal (argument.class, "buffer")
            my.proxy_arg = "$(my.arg_name:)Buf"

        elsif has_one_of_attribute (argument, "class, api, interface, impl")
            my.proxy_arg = "$(my.arg_name:).c_ctx"

        elsif defined (argument.enum)
            my.proxy_arg = "$(my.arg_name:).rawValue"

        else
            my.proxy_arg = "$(my.arg_name:)"
        endif

        if defined (my.proxy_arg) & argument.access = "disown"
            my.proxy_arg = "&" + my.proxy_arg
        endif

        my.proxy_args += my.proxy_arg ? ""
    endfor

    return my.proxy_args ? ""
endfunction


# ---------------------------------------------------------------------------
#   Create entity <php_argument/> from the entity <argument/>.
# ---------------------------------------------------------------------------
function php_create_argument (argument, destination, wrapper, meta)
    check_arguments (my, "argument, destination, wrapper, meta", my)

    assert_attributes (my.argument, "name", my)

    new php_argument to my.destination
        .name = php_derive_instance_name (my.argument)

        php_map_instance (php_argument, my.argument)

        return php_argument
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Map <instance/> attributes to the <php_instance/> attributes.
# ---------------------------------------------------------------------------
function php_map_instance (php_instance, instance)
    check_arguments (my, "php_instance, instance", my)

    php_map_attr_access (my.php_instance, my.instance)
    php_map_instance_type (my.php_instance, my.instance)
endfunction

# ---------------------------------------------------------------------------
#   Map <instance/> attributes to the <php_instance type=""/> attributes.
# ---------------------------------------------------------------------------
function php_map_instance_type (php_instance, instance)
    check_arguments (my, "php_instance, instance", my)

    my.php_instance.type = php_derive_instance_type (my.instance)

    if defined (my.instance.type)
        my.php_instance.is_primitive_type = "1"

    elsif defined (my.instance.class)
        my.php_instance.is_class = "1"

        if my.instance.class = "any"
            my.php_instance.is_any = "1"

        elsif my.instance.class = "data"
            my.php_instance.is_data = "1"

        elsif my.instance.class = "buffer"
            my.php_instance.is_buffer = "1"
        endif

    elsif defined (my.instance.interface)
        my.php_instance.is_interface = "1"

    elsif defined (my.instance.enum)
        my.php_instance.is_enum = "1"

    elsif defined (my.instance.impl)
        my.php_instance.is_class = "1"
    endif

    my.php_instance.is_array = count (my.instance.array) ?? "1" ?
    my.php_instance.is_reference = my.instance.is_reference ?
endfunction

# ---------------------------------------------------------------------------
#   Derive PHP type from the <instance/> type attributes.
# ---------------------------------------------------------------------------
function php_derive_instance_type (instance)
    check_arguments (my, "instance", my)

    if defined (my.instance.type)
        if my.instance.type = "nothing"
            my.primitive_type = "Void"

        elsif my.instance.type = "boolean"
            my.primitive_type = "Bool"

        elsif my.instance.type = "integer"
            my.primitive_type = php_derive_integer_type (my.instance.size ?)

        elsif my.instance.type = "unsigned"
            my.primitive_type = php_derive_unsigned_type (my.instance.size ?)

        elsif my.instance.type = "byte"
            my.primitive_type = "UInt8"

        elsif my.instance.type = "size"
            my.primitive_type = "Int"

        elsif my.instance.type = "char"
            my.primitive_type = "Character"

        else
            echo_fatal ("Unsupported instance type '$(my.instance.type)' for PHP language.", my)
        endif

        if is_true (my.instance.is_reference)
            if string_in (my.instance.access, "readonly")
                my.primitive_type = "UnsafePointer<$(my.primitive_type:)>"
            else
                my.primitive_type = "UnsafeMutablePointer<$(my.primitive_type:)>"
            endif
        endif

        if count (my.instance.array)
            if string_in (my.instance.access, "readonly")
                my.primitive_type = "UnsafePointer<$(my.primitive_type:)>"
            else
                my.primitive_type = "UnsafeMutablePointer<$(my.primitive_type:)>"
            endif
        endif

        return my.primitive_type

    elsif defined (my.instance.class)

        if my.instance.class = "any"
            return "Any"

        elsif my.instance.class = "data"
            return "Data"

        elsif my.instance.class = "buffer"
            return "Data"

        elsif is_ref (my.instance.class) | defined (my.instance.library)
            return php_lang_ref (my.instance.class)

        else
            my.project_uid = component_derive_project_uid (my.instance)
            my.type_uid = make_id ("class", "$(my.instance.class:Pascal)")
            return make_ref_php (make_id(my.project_uid, my.type_uid))
        endif

    elsif defined (my.instance.impl)
        my.project_uid = component_derive_project_uid (my.instance)
        my.type_uid = make_id ("class", "$(my.instance.impl:Pascal)")
        return make_ref_php (make_id(my.project_uid, my.type_uid))

    elsif defined (my.instance.interface)
        my.project_uid = component_derive_project_uid (my.instance)
        my.type_uid = make_id ("protocol", "$(my.instance.interface:Pascal)")
        return make_ref_php (make_id(my.project_uid, my.type_uid))

    elsif defined (my.instance.enum)
        my.project_uid = component_derive_project_uid (my.instance)
        my.type_uid = make_id ("enum", "$(my.instance.enum:Pascal)")
        return make_ref_php (make_id(my.project_uid, my.type_uid))

    else
        my.instance_dump = component_instance_dump (my.instance)

        echo_warning ("Unreachable code, component_resolve_instance() must handle this. $(my.instance_dump:)", my)

        return "Unknown"
    endif
endfunction

# ---------------------------------------------------------------------------
#   Derive PHP unsigned integer type correspond to it's size.
#   Size: {1, 2, 4, 8}.
# ---------------------------------------------------------------------------
function php_derive_unsigned_type (size)
    if defined (my.size)
        if my.size = "1"
            return "UInt8"

        elsif my.size = "2"
            return "UInt16"

        elsif my.size = "4"
            return "UInt32"

        elsif my.size = "8"
            return "UInt64"
        else
            echo_fatal ("Unsupported size 'my.size' for PHP unsigned integers", my)
        endif
    else
        return "UInt32"
    endif
endfunction

# ---------------------------------------------------------------------------
#   Derive PHP integer type correspond to it's size.
#   Size: {1, 2, 4, 8}.
# ---------------------------------------------------------------------------
function php_derive_integer_type (size)
    if defined (my.size)
        if my.size = "1"
            return "Int8"

        elsif my.size = "2"
            return "Int16"

        elsif my.size = "4"
            return "Int32"

        elsif my.size = "8"
            return "Int64"
        else
            echo_fatal ("Unsupported size 'my.size' for PHP integers", my)
        endif
    else
        return "Int32"
    endif
endfunction

# ---------------------------------------------------------------------------
#   Map attribute 'access' of <component/> to <php_component/>.
# ---------------------------------------------------------------------------
function php_map_attr_access (php_component, component)
    check_arguments (my, "php_component, component", my)

    assert_attribute (my.component, "access", my)

    my.php_component.access = my.component.access
endfunction

# ---------------------------------------------------------------------------
#   Return formatted instance name.
# ---------------------------------------------------------------------------
function php_derive_instance_name (instance)
    check_arguments (my, "instance", my)

    assert_attribute (my.instance, "name", my)

    return "$(my.instance.name:Camel)"
endfunction

# ---------------------------------------------------------------------------
#   Create <php_destructor/>.
# ---------------------------------------------------------------------------
function php_create_class_destructor (php_class, class, wrapper, meta)
    check_arguments (my, "php_class, class, wrapper, meta", my)

    my.self_ctx = "self.c_ctx"

    if string_in (my.class.context, "public") & string_in (my.class.lifecycle, "none")
        my.dtor_invocation = ".(c_global_method_dealloc)($(my.self_ctx:))"
    else
        my.dtor_invocation = "$(class_derive_c_destructor (my.class))($(my.self_ctx:))"
    endif


    new php_destructor to my.php_class
        . = "*222 Release underlying C context."

        new php_code to php_destructor
            . = "$(my.dtor_invocation:)"
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create default <php_constructor/> that initialize underlying C context.
# ---------------------------------------------------------------------------
function php_create_class_default_constructor (php_class, class, wrapper, meta)
    check_arguments (my, "php_class, class, wrapper, meta", my)

    if string_in (my.class.context, "public") & string_in (my.class.lifecycle, "none")
        my.ctx_size_invocation = "$(class_derive_class_c_method_ctx_size (my.class))()"
        my.ctor_invocation = ".(c_global_method_alloc)($(my.ctx_size_invocation:))!" + \
                ".bindMemory(to: $(class_derive_c_type(my.class)).self, capacity:1)"
    else
        my.ctor_invocation = "$(class_derive_c_defalut_constructor (my.class))()"
    endif

    new php_constructor to my.php_class
        . = "* Create underlying C context."
        .override = "1"
        .visibility = "public"

        #new php_code to php_constructor
        #    . = "\
        #        self.c_ctx = $(my.ctor_invocation:)
        #        super.init()
        #    "
        #endnew
        new php_code to php_constructor
            . = "$this->c_ctx = $(my.ctor_invocation:);"
        endnew
    endnew

    new php_constructor to my.php_class
        . = "
        * Acquire C context.
        * Note. This method is used in generated code only, and SHOULD NOT be used in another way.
        "
        .visibility = "public"

        new php_argument to php_constructor
            .name = "c_ctx"
            .type = php_derive_class_context_type (my.class)
        endnew

        new php_code to php_constructor
            . = "\
                self.c_ctx = c_ctx
                super.init()
            "
        endnew
    endnew

    if string_in (my.class.lifecycle, "default")
        new php_constructor to my.php_class
            . = "\
            * Acquire retained C context.
            * Note. This method is used in generated code only, and SHOULD NOT be used in another way.
            "
            .visibility = "public"

            new php_argument to php_constructor
                .name = "c_ctx"
                .type = php_derive_class_context_type (my.class)
            endnew

            new php_code to php_constructor
                . = "\
                    self.c_ctx = $(class_derive_c_method_shallow_copy (my.class))(c_ctx)
                    super.init()
                "
            endnew
        endnew
    endif
endfunction

# ---------------------------------------------------------------------------
#   Create entity <php_inherit/> from NSObject.
# ---------------------------------------------------------------------------
function php_create_inherit_nsobject (destination)
    check_arguments (my, "destination", my)

    new php_inherit to my.destination
        .type = "NSObject"

        return php_inherit
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Map attribute 'visibility' of <component/> to <php_component/>.
# ---------------------------------------------------------------------------
function php_map_attr_visibility (php_component, component)
    check_arguments (my, "php_component, component", my)

    #   TODO: make mapping more accurate.
    my.php_component.visibility = my.component.visibility ? "public"
endfunction

# ---------------------------------------------------------------------------
#   Return formatted name of the Objective-C class.
# ---------------------------------------------------------------------------
function php_derive_class_objc_name (php_class, wrapper)
    check_arguments (my, "php_class, wrapper", my)

    return "$(my.wrapper.prefix:UPPER)$(my.php_class.name:)"
endfunction

# ---------------------------------------------------------------------------
#   Return formatted module name.
# ---------------------------------------------------------------------------
function php_derive_module_name (type)
    check_arguments (my, "type", my)

    assert_attribute (my.type, "name", my)

    return "$(my.type.name:Pascal)"
endfunction

# ---------------------------------------------------------------------------
#   Add auto-resolving attributes:
#       - uid.
# ---------------------------------------------------------------------------
function php_module_resolve (php_module, wrapper)
    check_arguments (my, "php_module, wrapper", my)

    echo_trace ("Resolving <$(name (my.php_module)) name=\"$(my.php_module.name:)\"/>", my)

    assert_attribute (my.php_module, "name", my)

    #   Resolve UIDs
    php_module_resolve_uids (my.php_module)
endfunction

# ---------------------------------------------------------------------------
#   Resolve UIDs for given component and all inner components.
# ---------------------------------------------------------------------------
function php_module_resolve_uids (php_component, parent_uid)
    check_arguments (my, "php_component", my)

    if defined (my.parent_uid) & string.prefixed (my.parent_uid, "php_module")
        my.parent_uid = # Undefined
    endif

    my.component_name = name (my.php_component)
    if  defined (my.parent_uid) & string.prefixed (my.component_name, "php_")
        regexp.match ("php_(.+)", my.component_name, my.component_name)
    endif

    my.php_component.uid = make_id (my.parent_uid, my.component_name, my.php_component.name)

    for my.php_component. as inner_component where is_item (inner_component) & defined (inner_component.name)
        php_module_resolve_uids (inner_component, my.php_component.uid)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Setup and check default and automatically resolved attributes.
# ---------------------------------------------------------------------------
function php_resolve (project, wrapper)
    check_arguments (my, "project, wrapper", my)

    echo_info ("Resolve <wrapper lang=\"$(my.wrapper.lang:)\"/> for project: '$(my.project.name:)'", my)

    assert_attribute (my.wrapper, "lang", my)
    #assert_attributes (my.project, "name, prefix, framework", my)
    assert_attributes (my.project, "name, prefix", my)
    assert_item (my.project, "license", my)

    my.wrapper.project = my.project.name

    my.wrapper.prefix = my.project.prefix
    #my.wrapper.framework = my.project.framework
    my.wrapper.namespace = "$(my.project.namespace:Pascal)"
    my.wrapper.namespace_dir = my.wrapper.namespace
    my.wrapper.source_dir = \
            cat_path ("../wrappers/$(my.wrapper.lang:c,lower)", "VirgilCrypto", my.wrapper.namespace_dir)
    copy my.project->license to my.wrapper

    #new php_import to my.wrapper
    #    .framework = "Foundation"
    #endnew

    #new php_import to my.wrapper
    #    .framework = my.wrapper.framework
    #endnew

    #for my.project.require where defined (0.project) & string_equal (0.feature, "library")
    #    new php_import to my.wrapper
    #        .framework = make_ref_php (make_id ("project", require.project, "framework name"))
    #    endnew
    #endfor
endfunction

# ---------------------------------------------------------------------------
#   Create module that contains PHP specific project information.
# ---------------------------------------------------------------------------
function php_create_project_module (project, destination, wrapper)
    check_arguments (my, "wrapper, destination, wrapper", my)

    new php_project to my.destination
        . = my.project. ?

        new php_uid to php_project
            .name = my.wrapper.namespace
            .uid = "php_framework_name"
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Generate project files.
# ---------------------------------------------------------------------------
function php_generate_project (source, wrapper)
    check_arguments (my, "source, wrapper", my)
endfunction

# ---------------------------------------------------------------------------
#   Generate source files from <php_module/> entities.
# ---------------------------------------------------------------------------
function php_generate_sources (source, wrapper)
    check_arguments (my, "source, wrapper", my)

    assert_attribute (my.wrapper, "source_dir", my)

    if -1 = directory.create (my.wrapper.source_dir)
        echo_fatal ("Can not create directory: $(my.wrapper.source_dir:)")
    endif

    for my.source.php_module
        echo_trace ("Generate PHP files from <$(name (php_module)) name = \"$(c_module.name:)\"/>", my)

        output php_module.source_file_path

        php_insert_open_tag()

        php_insert_prologue (php_module)
        newline ()

        php_insert_namespace(my.wrapper)

        for php_module.php_import
            newline_if (first ())
            php_insert_import (php_import)
        endfor

        for php_module.php_enum
            newline ()
            php_insert_enum (php_enum)
        endfor

        for php_module.php_protocol
            newline ()
            php_insert_protocol (php_protocol)
        endfor

        for php_module.php_class
            newline ()
            php_insert_class (php_class)
        endfor

        for php_module.php_struct
            newline ()
            php_insert_struct (php_struct)
        endfor

        for php_module.php_extension
            newline ()
            php_insert_extension (php_extension)
        endfor
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: protocol
# ---------------------------------------------------------------------------
function php_insert_protocol (php_protocol)
    check_arguments (my, "php_protocol", my)

    echo_trace ("Generate PHP protocol: " + my.php_protocol.name, my)

    assert_attributes (my.php_protocol, "name, objc_name, visibility", my)

    for my.php_protocol.php_inherit
        my.php_inheritance_list ?= ": "
        my.php_inheritance_list += php_inherit.type
        if ! last()
            my.php_inheritance_list += ", "
        endif
    endfor

    php_insert_description(my.php_protocol)
    php_insert_code ("\
        @objc($(my.php_protocol.objc_name:)) $(my.php_protocol.visibility:) protocol $(my.php_protocol.name:) \
                $(my.php_inheritance_list?:) {
    ")

    for my.php_protocol.php_property
        php_insert_protocol_property (php_property)
    endfor

    for my.php_protocol.php_method
        newline ()
        php_insert_protocol_method (php_method)
    endfor

    php_insert_code ("}")
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: class
# ---------------------------------------------------------------------------
function php_insert_class (php_class)
    check_arguments (my, "php_class", my)

    echo_trace ("Generate PHP class: " + my.php_class.name, my)

    assert_attributes (my.php_class, "name, objc_name, visibility", my)

    my.php_inheritance_list = php_format_inheritance_list (my.php_class) ?

    php_insert_description(my.php_class)
    #php_insert_code ("\
    #    @objc($(my.php_class.objc_name:)) $(my.php_class.visibility:) \
    #            class $(my.php_class.name:)$(my.php_inheritance_list?:) {
    #")

    php_insert_code ("class $(my.php_class.name:Pascal) {")

    for my.php_class.php_property
        newline ()
        php_insert_class_property (php_property)
    endfor

    for my.php_class.php_constructor
        newline ()
        php_insert_constructor (php_constructor)
    endfor

    for my.php_class.php_destructor
        newline ()
        php_insert_destructor (php_destructor)
    endfor

    for my.php_class.php_method
        newline ()
        php_insert_class_method (php_method)
    endfor

    php_insert_code ("}")
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: class.method
# ---------------------------------------------------------------------------
function php_insert_class_method (php_method)
    check_arguments (my, "php_method", my)

    assert_attributes (my.php_method, "name", my)

    my.method_args = php_format_argument_list(my.php_method) ?
    my.method_return = php_format_return_list(my.php_method) ?
    my.method_throws = is_true (my.php_method.throws) ?? "throws" ?
    my.override = is_true (my.php_method.override) ?? "override" ?

    php_insert_description (my.php_method, 1)
    #php_insert_code("\
    #    @objc $(my.php_method.visibility?:) $(my.php_method.modifier?:) $(my.override?:) \
    #            func $(my.php_method.name:)($(my.method_args?:)) $(my.method_throws?:) $(my.method_return?:) {
    #", 1)

    php_insert_code("\
        $(my.php_method.visibility?:) $(my.php_method.modifier?:) $(my.override?:) \
                function $(my.php_method.name:Camel)($(my.method_args?:)) {
    ", 1)

    if count (my.php_method.php_code)
        php_insert_code (my.php_method->php_code., 2)
    else
        php_insert_code ("// TODO: Implement me.", 2)
    endif

    php_insert_code ("}", 1)
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: destructor / deinit
# ---------------------------------------------------------------------------
function php_insert_destructor (php_destructor)
    check_arguments (my, "php_destructor", my)

    php_insert_description (my.php_destructor, 1)
    #s!php_insert_code("\
    #s!     deinit {
    #s!", 1)

    php_insert_code("\
         public function __destruct() {
    ", 1)

    #s!php_insert_code("\
    #s!    $(my.php_destructor->php_code.:)
    #s!", 2)

    php_insert_code("return $(my.php_destructor->php_code.:);", 2)

    php_insert_code ("}", 1)
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: class.property
# ---------------------------------------------------------------------------
function php_insert_class_property (php_property)
    check_arguments (my, "php_property", my)

    assert_attributes (my.php_property, "name, type, visibility", my)

    my.is_computed = count (my.php_property.computed)
    my.is_const = my.php_property.access = "readonly"
    my.is_writeonly = my.php_property.access = "writeonly"

    #my.let_var = (my.is_const & !my.is_computed) ?? "let" ? "var"
    my.let_var = (my.is_const & !my.is_computed) ?? "const" ? "$"

    if my.is_computed
        my.var_init =  " {"
    elsif defined (my.php_property.value)
        my.var_init =  " = $(my.php_property.value:)"
    endif

    php_insert_description (my.php_property, 1)
    #s!php_insert_code("\
    #s!    @objc $(my.php_property.visibility:) $(my.php_property.modifier?:) $(my.let_var:) \
    #s!            $(my.php_property.name:): $(my.php_property.type:)$(my.var_init?:)
    #s!", 1)

    php_insert_code("$(my.php_property.visibility:) $$(my.php_property.name:);", 1)

    if my.is_computed
        php_insert_code("\
            $(my.php_property->computed.)
        ", 2)
        php_insert_code("}", 1)
    endif
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: protocol.property
# ---------------------------------------------------------------------------
function php_insert_protocol_property (php_property)
    check_arguments (my, "php_property", my)

    assert_attributes (my.php_property, "name, type, visibility", my)

    my.property_modifiers = (my.php_property.access = "readonly") ?? "{ get }" ? "{ get set }"

    php_insert_description (my.php_property, 1)
    php_insert_code("\
        @objc $(my.php_property.modifier?:) var $(my.php_property.name:): \
                $(my.php_property.type:) $(my.property_modifiers:)
    ", 1)
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: protocol.method
# ---------------------------------------------------------------------------
function php_insert_protocol_method (php_method)
    check_arguments (my, "php_method", my)

    assert_attributes (my.php_method, "name", my)

    my.method_args = php_format_argument_list(my.php_method) ?
    my.method_return = php_format_return_list(my.php_method) ?
    my.method_throws = my.php_method.throws ?? "throws" ?

    php_insert_code("\
        @objc $(my.php_method.modifier?:) func $(my.php_method.name:)($(my.method_args?:)) \
                $(my.method_throws?:) $(my.method_return?:)
    ", 1)
endfunction

# ---------------------------------------------------------------------------
#   Insert: license + caution + description
# ---------------------------------------------------------------------------
function php_insert_prologue (php_module)
    check_arguments (my, "php_module", my)

    assert_item (my.php_module, "php_license", my)

    php_insert_description (my.php_module->php_license)
endfunction

# ---------------------------------------------------------------------------
#   Insert description of the given object.
# ---------------------------------------------------------------------------
function php_insert_description (obj, tab_count)
    my.desciption = my.obj. ?
    my.tab_count ?= 0
    if string_empty (my.desciption)
        return
    endif
    php_insert_code ("/**", my.tab_count)
    php_insert_code (my.desciption, my.tab_count)
    php_insert_code ("*/", my.tab_count)
endfunction

# ---------------------------------------------------------------------------
#   Insert given multiline code.
# ---------------------------------------------------------------------------
function php_insert_code (code, tab_count)
    check_argument (my, "code", my)

    my.code = "$(my.code:left,no)"
    my.code = string_trim (my.code)
    my.code = code_collapse_spaces (my.code)

    my.code = string_indent (my.code, my.tab_count)
    my.code = string_multi_rtrim (my.code)

    out (my.code)
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: open_php_tag
# ---------------------------------------------------------------------------
function php_insert_open_tag ()
    php_insert_code ("<?php")
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: open_php_tag
# ---------------------------------------------------------------------------
function php_insert_namespace (wrapper)
    check_arguments (my, "wrapper", my)

    php_insert_code ("namespace Virgil\\$(my.wrapper.namespace:);")
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: import
# ---------------------------------------------------------------------------
function php_insert_import (php_import)
    check_arguments (my, "php_import", my)

    #assert_attribute (my.php_import, "framework", my)

    #php_insert_code ("import $(my.php_import.framework:)")
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: enum
# ---------------------------------------------------------------------------
function php_insert_enum (php_enum)
    check_arguments (my, "php_enum", my)

    echo_trace ("Generate PHP enum: " + my.php_enum.name, my)

    assert_attributes (my.php_enum, "name, objc_name, visibility", my)

    my.php_inheritance_list = php_format_inheritance_list (my.php_enum) ?

    php_insert_description(my.php_enum)
    #s!php_insert_code ("\
    #s!    @objc($(my.php_enum.objc_name:)) $(my.php_enum.visibility:)\
    #s!            enum $(my.php_enum.name:)$(my.php_inheritance_list?:) {
    #s!")

    php_insert_code ("class $(my.php_enum.name:) $(terminator){")

    for my.php_enum.php_constant
        newline ()
        php_insert_enum_constant (php_constant)
    endfor

    for my.php_enum.php_constructor
        newline ()
        php_insert_constructor (php_constructor)
    endfor

    for my.php_enum.php_method
        newline ()
        php_insert_enum_method (php_method)
    endfor

    php_insert_code ("}")

endfunction

# ---------------------------------------------------------------------------
#   Insert statement: class.method
# ---------------------------------------------------------------------------
function php_insert_enum_method (php_method)
    check_arguments (my, "php_method", my)

    assert_attributes (my.php_method, "name", my)

    my.method_args = php_format_argument_list(my.php_method) ?
    my.method_return = php_format_return_list(my.php_method) ?
    #s!my.method_throws = is_true (my.php_method.throws) ?? "throws" ?

    php_insert_description (my.php_method, 1)
    #s!php_insert_code("\
    #s!    $(my.php_method.visibility?:) $(my.php_method.modifier?:) func \
    #s!            $(my.php_method.name:)($(my.method_args?:)) $(my.method_throws?:) $(my.method_return?:) {
    #s!", 1)

    php_insert_code("\
        $(my.php_method.visibility?:) $(my.php_method.modifier?:) function \
                $(my.php_method.name:)($(my.method_args?:)) {
    ", 1)

    php_insert_code (my.php_method->php_code., 2)

    php_insert_code ("}", 1)
endfunction

# ---------------------------------------------------------------------------
#   Return formatted list of returned value(s).
# ---------------------------------------------------------------------------
function php_format_return_list (php_method)
    check_arguments (my, "php_method", my)

    my.is_tuple = count (my.php_method.php_return) > 1 ?? "1" ? "0"

    for my.php_method.php_return
        my.return_list ?= ""

        if my.is_tuple
            my.return_list += "$(php_return.name:): $(php_return.type:)"
        else
            my.return_list += "$(php_return.type:)"
        endif

        if ! last()
            my.return_list += ", "
        endif
    endfor

    if defined (my.return_list) & my.is_tuple
        my.return_list = "(" + my.return_list + ")"
    endif

    if defined (my.return_list)
        my.return_list = " -> " + my.return_list
    endif

    return my.return_list
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: constructor / init
# ---------------------------------------------------------------------------
function php_insert_constructor (php_constructor)
    check_arguments (my, "php_constructor", my)

    assert_attributes (my.php_constructor, "visibility", my)
    assert_item (my.php_constructor, "php_code", my)

    my.method_args = php_format_argument_list(my.php_constructor) ?
    #my.override = is_true (my.php_constructor.override) ?? "override" ?

    php_insert_description (my.php_constructor, 1)
    #s!php_insert_code("\
    #s!     $(my.php_constructor.visibility:) $(my.override?:) init($(my.method_args?:)) {
    #s!", 1)

    php_insert_code("\
         public function __construct($(my.method_args?:)) {
    ", 1)

    php_insert_code("\
        $(my.php_constructor->php_code.:)
    ", 2)

    php_insert_code ("}", 1)
endfunction

# ---------------------------------------------------------------------------
#   Return formatted list of arguments without braces.
# ---------------------------------------------------------------------------
function php_format_argument_list (php_method)
    check_arguments (my, "php_method", my)

    for my.php_method.php_argument
        my.arg_list ?= ""
        my.arg_list += "$$(php_argument.name:)"
        if ! last()
            my.arg_list += ", "
        endif
    endfor

    return my.arg_list
endfunction

# ---------------------------------------------------------------------------
#   Insert statement: enum.case
# ---------------------------------------------------------------------------
function php_insert_enum_constant (php_constant)
    check_arguments (my, "php_constant", my)

    my.value = defined (my.php_constant.value) ?? " = $(my.php_constant.value:)" ? ""
    php_insert_description (my.php_constant, 1)
    #php_insert_code ("\
    #    case $(my.php_constant.name:)$(my.value:)
    #", 1)
    php_insert_code ("\
        const $(my.php_constant.name:UPPER)$(my.value:);
    ", 1)
endfunction

# ---------------------------------------------------------------------------
#   Return inheritance list if defined <php_inherit/>, otherwise - nothing.
# ---------------------------------------------------------------------------
function php_format_inheritance_list (php_type)
    check_arguments (my, "php_type", my)

     for my.php_type.php_inherit
        my.inheritance_list ?= ": "
        my.inheritance_list += php_inherit.type
        if ! last ()
            my.inheritance_list += ", "
        endif
    endfor

    return my.inheritance_list
endfunction

# ---------------------------------------------------------------------------
#   Create module with base protocol that handles C context.
# ---------------------------------------------------------------------------
function php_create_c_context_module (destination, wrapper, meta)
    check_arguments (my, "destination, wrapper, meta", my)

    my.name = "CContext"

    new php_module to my.destination
        . = "* This is base protocol for all types that wrap C interfaces."
        .name = my.name
        .source_file_name = 0.name + ".php"
        .source_file_path = cat_path (my.wrapper.source_dir, 0.source_file_name)

        new php_license to php_module
            . = php_format_license (my.wrapper->license) ?
        endnew

        #new php_import to php_module
        #    .framework = "Foundation"
        #endnew

        new php_protocol to php_module
            .name = my.name
            .objc_name = php_derive_protocol_objc_name (php_protocol, my.wrapper)
            .visibility = "public"

            php_create_class_property_context (php_protocol)
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create module with PHP enum from the abstract 'enum' notion.
# ---------------------------------------------------------------------------
function php_create_enum_module (enum, destination, wrapper, meta)
    check_arguments (my, "enum, destination, wrapper, meta", my)

    echo_info ("Create <php_module/> from enum: '$(my.enum.name:)'", my)

    assert_attribute (my.enum, "name", my)

    new php_module to my.destination
        .name = php_derive_module_name (my.enum)
        .source_file_name = 0.name + ".php"
        .source_file_path = cat_path (my.wrapper.source_dir, 0.source_file_name)

        new php_license to php_module
            . = php_format_license (my.wrapper->license) ?
        endnew

        #new php_import to php_module
        #    .framework = "Foundation"
        #endnew

        #new php_import to php_module
        #   .framework = my.wrapper.framework
        #endnew

        new php_enum to php_module
            . = php_format_description (my.enum) ?
            .name = php_derive_enum_name (my.enum, my.wrapper)
            .objc_name = php_derive_enum_objc_name (php_enum, my.wrapper)

            php_map_attr_visibility (php_enum, my.enum)
            php_map_attr_scope (php_enum, my.enum)

            new php_inherit to php_enum
                .type = "Int"
            endnew

            if my.enum.name = "error"
                php_map_enum_error (php_enum, my.enum, my.wrapper, my.meta)
            else
                php_map_enum_default (php_enum, my.enum, my.wrapper, my.meta)
            endif

            php_create_enum_constructor (php_enum, my.enum, my.wrapper, my.meta)
        endnew
    endnew

    echo_debug ("Done", my)
endfunction

# ---------------------------------------------------------------------------
#   Add constructor init(fromC: c_enum_type)
# ---------------------------------------------------------------------------
function php_create_enum_constructor (php_enum, enum, wrapper, meta)
    check_arguments (my, "php_enum, enum, wrapper, meta")

    new php_constructor to my.php_enum
        . = "* Create enumeration value from the correspond C enumeration value."
        .visibility = "public"

        my.arg_enum_name = php_derive_argument_name (my.enum, my.wrapper)

        new php_argument to php_constructor
            .name = my.arg_enum_name
            .type = make_ref_c (make_id ("class", my.enum.name, "enum", my.enum.name))
        endnew

        new php_code to php_constructor
            . = "\
                self.init(rawValue: Int($(my.arg_enum_name:).rawValue))!
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Add entities for regular enum (not error codes).
# ---------------------------------------------------------------------------
function php_map_enum_default (php_enum, enum, wrapper, meta)
    check_arguments (my, "php_enum, enum, wrapper, meta")

    for my.enum.constant
        php_create_enum_constant (constant, my.php_enum, my.wrapper, my.meta)
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Add entities specific for "error" enum.
# ---------------------------------------------------------------------------
function php_map_enum_error (php_enum, enum, wrapper, meta)
    check_arguments (my, "php_enum, enum, wrapper, meta")

    new php_inherit to my.php_enum
        .type = "Error"
    endnew

    for my.enum.constant where 0.name <> "success"
        php_create_enum_constant (constant, my.php_enum, my.wrapper, my.meta)
    endfor

    new php_method to my.php_enum
        . = "* Check given C error (result), and if it's not \"success\" then throw correspond exception."
        .name = "handleError"
        .visibility = "public"
        .modifier = "static"
        .throws = "1"

        new php_argument to php_method
            .name = "code"
            .type = make_ref_c (make_id ("class", my.enum.name, "enum", my.enum.name))
        endnew

        my.success_constant = \
                make_ref_c (make_id ("global", "enum", my.enum.name, "constant success"))

        new php_code to php_method
            . = "\
                if $code !== $(my.success_constant:) {
                    throw $(my.php_enum.name:)($code)
                }
            "
        endnew
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Create enumeration <php_constant/> from the entity <constant/>
# ---------------------------------------------------------------------------
function php_create_enum_constant (constant, php_enum, wrapper, meta)
    check_arguments (my, "constant, php_enum, wrapper, meta", my)

    assert_attribute (my.constant, "name", my)

    new php_constant to my.php_enum
        . = php_format_description (my.constant) ?
        .name = php_derive_constant_name (my.constant, my.wrapper)
        .value = my.constant.value ?
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Map attribute 'scope' of <component/> to <php_component/>.
# ---------------------------------------------------------------------------
function php_map_attr_scope (php_component, component)
    check_arguments (my, "php_component, component", my)

    #   TODO: make mapping more accurate.
    my.php_component.scope = my.component.scope ? "public"
endfunction


# ---------------------------------------------------------------------------
#   Return formatted name of the Objective-C enum.
# ---------------------------------------------------------------------------
function php_derive_enum_objc_name (php_enum, wrapper)
    check_arguments (my, "php_enum, wrapper", my)

    return "$(my.wrapper.prefix:UPPER)$(my.php_enum.name:)"
endfunction

# ---------------------------------------------------------------------------
#   Return formatted name of the PHP enum.
# ---------------------------------------------------------------------------
function php_derive_enum_name (enum, wrapper)
    check_arguments (my, "enum, wrapper", my)

    assert_attribute_one_of (my.enum, "name", my)

    if my.enum.name = "error"
        return php_derive_enum_error_name (my.wrapper)
    else
        return "$(my.enum.name:Pascal)"
    endif

endfunction

# ---------------------------------------------------------------------------
#   Create module with PHP class from the abstract 'implementation' notion.
# ---------------------------------------------------------------------------
function php_create_implementation_module (implementation, destination, wrapper, meta)
    check_arguments (my, "implementation, destination, wrapper, meta", my)

    if my.implementation.scope <> "internal"
        echo_info ("Create <php_module/> from implementation: '$(my.implementation.name:)'", my)
    else
        echo_info ("Skip creating <php_module/> from internal implementation: '$(my.implementation.name:)'", my)
    endif

    new php_module to my.destination
        .name = php_derive_module_name (my.implementation)
        .source_file_name = 0.name + ".php"
        .source_file_path = cat_path (my.wrapper.source_dir, 0.source_file_name)

        new php_license to php_module
            . = php_format_license (my.wrapper->license) ?
        endnew

        for my.wrapper.php_import
            copy php_import to php_module
        endfor

        new php_class to php_module
            . = php_format_description (my.implementation) ?
            .name = php_derive_class_name (my.implementation, my.wrapper)
            .objc_name = php_derive_class_objc_name (php_class, my.wrapper)

            php_map_attr_visibility (php_class, my.implementation)

            php_create_inherit_nsobject (php_class)

            for my.implementation.constant
                php_create_property_from_constant (constant, php_class, my.wrapper, my.meta)
            endfor

            for my.implementation.dependency
                php_create_method_from_dependency (dependency, my.implementation, php_class, my.wrapper, my.meta)
            endfor

            for my.implementation.method where method.declaration = "public" & method.visibility = "public"
                php_create_class_method (my.implementation, method, php_class, my.wrapper, my.meta)
            endfor

            if my.implementation.context <> "none"
                php_create_class_property_context (php_class, my.implementation)

                php_create_class_default_constructor (php_class, my.implementation, my.wrapper, my.meta)
                php_create_class_destructor (php_class, my.implementation, my.wrapper, my.meta)

                if my.implementation.lifecycle <> "none"
                    for my.implementation.constructor
                        php_create_class_constructor (\
                            my.implementation, constructor, php_class, my.wrapper, my.meta)
                    endfor
                endif
            endif

            php_create_interface_implementation (my.implementation, php_class, my.wrapper, my.meta)

            for php_class.php_method where count (0.php_return) > 1
                php_create_result_class (php_class, php_method, php_module, my.wrapper, my.meta)
            endfor
        endnew
    endnew

    echo_debug ("Done", my)
endfunction

# ---------------------------------------------------------------------------
#   Add all components related to the interface.
# ---------------------------------------------------------------------------
function php_create_interface_implementation (implementation, php_class, wrapper, meta)
    check_arguments (my, "implementation, php_class, wrapper, meta", my)

    for my.implementation.interface
        php_create_inherit (interface, my.php_class, my.wrapper, my.meta)

        for interface.constant
            php_create_property_from_constant (constant, my.php_class, my.wrapper, my.meta)
        endfor

        for interface.method
            php_create_class_method (my.implementation, method, my.php_class, my.wrapper, my.meta)
        endfor
    endfor
endfunction

# ---------------------------------------------------------------------------
#   Return formatted multiline commented string.
# ---------------------------------------------------------------------------
function php_format_description (obj)
    if ! defined (my.obj.)
        return
    endif

    my.str = my.obj.
    my.str = string_indent (my.str)
    my.str = "* $(my.str:left, block, no)$(terminator)"
    my.str = string_multi_rtrim (my.str)

    return my.str
endfunction

# ---------------------------------------------------------------------------
#   Return multiline formatted string with license.
# ---------------------------------------------------------------------------
function php_format_license(license)
    return php_format_description (my.license) ?
endfunction

# ---------------------------------------------------------------------------
#   Return formatted name of the PHP class.
# ---------------------------------------------------------------------------
function php_derive_class_name (class, wrapper)
    check_arguments (my, "class", my)

    assert_attribute_one_of (my.class, "name", my)

    return php_derive_class_name_str (my.class.name)
endfunction

# ---------------------------------------------------------------------------
#   Return formatted name of the PHP class.
# ---------------------------------------------------------------------------
function php_derive_class_name_str (name)
    check_arguments (my, "name", my)

    return "$(my.name:Pascal)"
endfunction

# ---------------------------------------------------------------------------
#   Return formatted name of the Objective-C protocol.
# ---------------------------------------------------------------------------
function php_derive_protocol_objc_name (php_protocol, wrapper)
    check_arguments (my, "php_protocol, wrapper", my)

    return "$(my.wrapper.prefix:UPPER)$(my.php_protocol.name:)"
endfunction

# ---------------------------------------------------------------------------
#   Create <php_property/> that handles underlying C context.
# ---------------------------------------------------------------------------
function php_create_class_property_context (destination, class)
    check_arguments (my, "destination", my)

    new php_property to my.destination
        . = "* Handle underlying C context."
        .name = "c_ctx"
        .type = php_derive_class_context_type (my.class)
        .access = "readonly"
        .visibility = "public"

        return php_property
    endnew
endfunction

# ---------------------------------------------------------------------------
#   Return PHP type for class context.
# ---------------------------------------------------------------------------
function php_derive_class_context_type (class)
    if defined (my.class) & string_equal (my.class.context, "public")
        return "UnsafeMutablePointer<$(class_derive_c_type(my.class))>"
    else
        return "OpaquePointer"
    endif
endfunction

.endtemplate
